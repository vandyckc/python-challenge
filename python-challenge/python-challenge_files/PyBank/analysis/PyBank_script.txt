{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Total Profit/Losses: 22564198\n",
      "86\n",
      "{'Feb-10': -1443517, 'Mar-10': 631156, 'Apr-10': -1004755, 'May-10': 1581126, 'Jun-10': -289272, 'Jul-10': -1098929, 'Aug-10': 1167557, 'Sep-10': -806093, 'Oct-10': 1124485, 'Nov-10': -1736491, 'Dec-10': -408383, 'Jan-11': 604557, 'Feb-11': -294345, 'Mar-11': 1327485, 'Apr-11': 394323, 'May-11': 243585, 'Jun-11': -617439, 'Jul-11': -1530577, 'Aug-11': 1390390, 'Sep-11': -1130397, 'Oct-11': 1293604, 'Nov-11': 641758, 'Dec-11': -337413, 'Jan-12': -52031, 'Feb-12': -937192, 'Mar-12': 863841, 'Apr-12': -76245, 'May-12': -100481, 'Jun-12': -960729, 'Jul-12': 591856, 'Aug-12': 54930, 'Sep-12': 680102, 'Oct-12': -250254, 'Nov-12': -840415, 'Dec-12': 582358, 'Jan-13': -48628, 'Feb-13': -135256, 'Mar-13': 978586, 'Apr-13': -599210, 'May-13': -442789, 'Jun-13': 652924, 'Jul-13': -1005714, 'Aug-13': 1167373, 'Sep-13': -234900, 'Oct-13': -165147, 'Nov-13': -52275, 'Dec-13': -302320, 'Jan-14': 719028, 'Feb-14': -1825558, 'Mar-14': 1287083, 'Apr-14': -48303, 'May-14': 210234, 'Jun-14': -236414, 'Jul-14': 585165, 'Aug-14': -1400632, 'Sep-14': 839777, 'Oct-14': 465229, 'Nov-14': 317811, 'Dec-14': -760202, 'Jan-15': -71868, 'Feb-15': 795457, 'Mar-15': -182685, 'Apr-15': -1242836, 'May-15': 1371884, 'Jun-15': -445193, 'Jul-15': 10025, 'Aug-15': -1043998, 'Sep-15': 1350395, 'Oct-15': 80538, 'Nov-15': -1223250, 'Dec-15': 104148, 'Jan-16': 843924, 'Feb-16': -1808664, 'Mar-16': 1505005, 'Apr-16': 306402, 'May-16': -143603, 'Jun-16': -1266937, 'Jul-16': -162519, 'Aug-16': 1862002, 'Sep-16': -52986, 'Oct-16': -1627245, 'Nov-16': 616795, 'Dec-16': 628522, 'Jan-17': 90895, 'Feb-17': -224669}\n",
      "1862002\n",
      "-1825558\n",
      "-8311.105882352942\n"
     ]
    }
   ],
   "source": [
    "import csv\n",
    "import os\n",
    "\n",
    "# READ IN CSV AS BUDGET DATA\n",
    "with open('budget_data.csv', 'r') as budget_data:\n",
    "    csvreader = csv.DictReader(budget_data, delimiter=',')\n",
    "\n",
    "    budget_data = []\n",
    "    for row in csvreader:\n",
    "        budget_data.append(row)\n",
    "\n",
    " # CALCULATE TOTAL PROFIT/LOSSES\n",
    "    total_net = sum(int(row['Profit/Losses']) for row in budget_data)\n",
    "\n",
    "    print('Total Profit/Losses:', total_net)\n",
    "\n",
    "# CALCULATE TOTAL MONTHS\n",
    "    total_months = len(budget_data)\n",
    "    print(total_months)\n",
    "\n",
    "# QUESTION 3 ANSWER\n",
    "    NumList = []\n",
    "    DateList = []\n",
    "    for row in budget_data:\n",
    "        if len(row.keys()) > 1:\n",
    "            try:\n",
    "                num = int(row['Profit/Losses'])\n",
    "                NumList.append(num)\n",
    "                date = row['Date']\n",
    "                DateList.append(date)\n",
    "            except ValueError:\n",
    "                pass\n",
    "\n",
    "    PointChange = []\n",
    "    for index, value in enumerate(NumList):\n",
    "        try:\n",
    "            value2 = NumList[index + 1]\n",
    "            change = value2 - value\n",
    "            PointChange.append(change)\n",
    "        except:\n",
    "            pass\n",
    "\n",
    "    DayChange = dict(zip(DateList[1:], PointChange))\n",
    "    print(DayChange)\n",
    "\n",
    "# calculate max\n",
    "    max_profit = max(PointChange)\n",
    "    print(max_profit)\n",
    "\n",
    "# calculate min\n",
    "    min_profit = min(PointChange)\n",
    "    print(min_profit)\n",
    "\n",
    "# average change\n",
    "\n",
    "    avg_change= sum(PointChange)/len(PointChange)\n",
    "    print(avg_change)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def script_txt(budget_practice):\n",
    "    with open(budget_practice) as f:\n",
    "        data = f.read()\n",
    "        f.close()\n",
    "\n",
    "    with open(\"PyBank_script.txt\", mode=\"w\") as f:\n",
    "        f.write(data)\n",
    "        f.close()\n",
    "\n",
    "script_txt(\"PyBank_script.py\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# import os\n",
    "# output_path = os.path.join(\"PyBank\", \"PyBank_script.txt\")\n",
    "\n",
    "# # Open the file using \"write\" mode. Specify the variable to hold the contents\n",
    "# with open(output_path, 'w') as csvfile:\n",
    "#     # Initialize csv.writer\n",
    "#     csvwriter = csv.writer(csvfile, delimiter=',')\n",
    "\n",
    "    # # Write the first row (column headers)\n",
    "    # csvwriter.writerow(['First Name', 'Last Name', 'SSN'])\n",
    "\n",
    "    # # Write the second row\n",
    "    # csvwriter.writerow(['Caleb', 'Frost', '505-80-2901'])"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
